class Solution {
    public static int maximumCoins(int n, int[][] grid) {
        int maxCoins = 0;

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if ((i + j) % 2 != 0) {  // Check if it's a weak cell
                    int currentCoins = dfs(grid, i, j);
                    maxCoins = Math.max(maxCoins, currentCoins);
                }
            }
        }

        return maxCoins;
    }
    
    static int dfs(int[][] grid, int i, int j) {
        // Base cases
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0) {
            return 0;
        }

        int currentCoins = grid[i][j];
        int originalValue = grid[i][j];

        // Mark the current cell as visited
        grid[i][j] = 0;

        // Explore all possible directions (up, down, left, right)
        int up = dfs(grid, i - 1, j);
        int down = dfs(grid, i + 1, j);
        int left = dfs(grid, i, j - 1);
        int right = dfs(grid, i, j + 1);

        // Restore the original value of the cell
        grid[i][j] = originalValue;

        // Return the maximum coins collected considering all directions
        return currentCoins + Math.max(Math.max(up, down), Math.max(left, right));
    }
}
