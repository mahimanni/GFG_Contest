//method-1 using tabulation
class Solution {
    public static int fun(int n,int dp[])
    {
        if(n==0)return 2;
        if(n==1)return 5;
        if(n==2)return 9;
        if(n==3)return 7;
        
        int mod=1000000007;
        dp[0]=2;
        dp[1]=5;
        dp[2]=9;
        dp[3]=7;
        for(int i=4;i<=n;++i)
        {
            if(i%2==0)
            {
                dp[i]=(int)((1L*dp[i-2]*(i-2))%mod+(1L*dp[i-4]*(i-4))%mod)%mod;
            }
            else if(i%2!=0)
            {
                dp[i]=(int)((1L*dp[i-1]*(i-1))%mod+ (1L*dp[i-3]*(i-3))%mod)%mod;
            }
        }
        return dp[n];
    }
    public static int findFun(int n) {
        int dp[]=new int[n+1];
        return fun(n,dp); 
    }
}

//method-2 using memoization
class Solution {
    public static int fun(int n,int dp[])
    {
        int mod=1000000007;
        if(n==0)
         return 2;
        if(n==1)
         return 5;
        if(n==2)
         return 9;
        if(n==3)
         return 7;
        if(dp[n]!=-1)return dp[n];
        // if((n&1)==0)
        if(n%2==0)
        {
         return dp[n]=(int)((1L*(n-2)*fun(n-2,dp))%mod+ (1L*(n-4)*fun(n-4,dp))%mod)%mod;
        }
        else
        {
        return dp[n]=(int)((1L*(n-1)*fun(n-1,dp))%mod + (1L*(n-3)*fun(n-3,dp))%mod)%mod;
        }    
    }
    public static int findFun(int n) {
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        
        return fun(n,dp);
    }
}
