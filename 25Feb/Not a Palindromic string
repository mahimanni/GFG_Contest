//method-Optimized one
class Solution {
    public static String smallestString(int n, String s) {
        // StringBuilder to modify the input string
        StringBuilder answer = new StringBuilder(s);
        int odd = n % 2; // Check if the length of the string is odd
        
        if (n == 1) {
            return "-1"; // If n is 1, return -1
        }
        
        for (int i = 0; i < n / 2; i++) {
            if (s.charAt(i) != 'a') {
                answer.setCharAt(i, 'a'); // Replace non-'a' character with 'a'
                return answer.toString(); // Return the modified string
            }
        }

        answer.setCharAt(answer.length() - 1, 'b'); // Set the last character to 'b'
        return answer.toString(); // Return the modified string
    }
}

//method-There's always a bruteforce behind the optimized one.Just believe
class Solution {
    public static String smallestString(int n, String s) {
        String str="";
        if(n==1)
            return "-1";
          
        int j=0;    
        while(s.charAt(j)=='a')
        {
            str+="a";
            j+=1;
        }
        str+="a"+s.substring(j+1);
        
        int flag=0;
        for(int i=0;i<=n/2;i++)
        {
            if(str.charAt(i)!=str.charAt(n-i-1))
            {
                flag=1;
                break;
            }
        }
        
        if(flag==1)
         return str;   
        else
         return s.substring(0,n-1)+"b";
    }
}
